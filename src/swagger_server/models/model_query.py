# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.model_address import ModelAddress  # noqa: F401,E501
from swagger_server import util


class ModelQuery(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, addresses: List[ModelAddress]=None, client_ip: str=None, created_at: int=None, domain: str=None):  # noqa: E501
        """ModelQuery - a model defined in Swagger

        :param addresses: The addresses of this ModelQuery.  # noqa: E501
        :type addresses: List[ModelAddress]
        :param client_ip: The client_ip of this ModelQuery.  # noqa: E501
        :type client_ip: str
        :param created_at: The created_at of this ModelQuery.  # noqa: E501
        :type created_at: int
        :param domain: The domain of this ModelQuery.  # noqa: E501
        :type domain: str
        """
        self.swagger_types = {
            'addresses': List[ModelAddress],
            'client_ip': str,
            'created_at': int,
            'domain': str
        }

        self.attribute_map = {
            'addresses': 'addresses',
            'client_ip': 'client_ip',
            'created_at': 'created_at',
            'domain': 'domain'
        }
        self._addresses = addresses
        self._client_ip = client_ip
        self._created_at = created_at
        self._domain = domain

    @classmethod
    def from_dict(cls, dikt) -> 'ModelQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The model.Query of this ModelQuery.  # noqa: E501
        :rtype: ModelQuery
        """
        return util.deserialize_model(dikt, cls)

    @property
    def addresses(self) -> List[ModelAddress]:
        """Gets the addresses of this ModelQuery.


        :return: The addresses of this ModelQuery.
        :rtype: List[ModelAddress]
        """
        return self._addresses

    @addresses.setter
    def addresses(self, addresses: List[ModelAddress]):
        """Sets the addresses of this ModelQuery.


        :param addresses: The addresses of this ModelQuery.
        :type addresses: List[ModelAddress]
        """

        self._addresses = addresses

    @property
    def client_ip(self) -> str:
        """Gets the client_ip of this ModelQuery.


        :return: The client_ip of this ModelQuery.
        :rtype: str
        """
        return self._client_ip

    @client_ip.setter
    def client_ip(self, client_ip: str):
        """Sets the client_ip of this ModelQuery.


        :param client_ip: The client_ip of this ModelQuery.
        :type client_ip: str
        """

        self._client_ip = client_ip

    @property
    def created_at(self) -> int:
        """Gets the created_at of this ModelQuery.


        :return: The created_at of this ModelQuery.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: int):
        """Sets the created_at of this ModelQuery.


        :param created_at: The created_at of this ModelQuery.
        :type created_at: int
        """

        self._created_at = created_at

    @property
    def domain(self) -> str:
        """Gets the domain of this ModelQuery.


        :return: The domain of this ModelQuery.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: str):
        """Sets the domain of this ModelQuery.


        :param domain: The domain of this ModelQuery.
        :type domain: str
        """

        self._domain = domain
